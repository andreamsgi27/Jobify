package dev.andrea.jobify;

import dev.andrea.jobify.service.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private CustomUserDetailsService customUserDetailsService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests()  // Cambio de 'authorizeRequests()' a 'authorizeHttpRequests()'
                .requestMatchers("/auth/register").permitAll()  // Allow registration for everyone
                .requestMatchers("/user/**").authenticated()    // All /user endpoints require authentication
                .requestMatchers("/application/**").authenticated()  // Protect application endpoints
                .requestMatchers("/app/phase/**").authenticated() // Protect phase endpoints
                .anyRequest().denyAll()  // Deny all other requests by default
            .and()
            .httpBasic()
            .and()
            .csrf().disable()  // Disable CSRF protection
            .logout()
                .logoutUrl("/logout")  // URL for logout
                .invalidateHttpSession(true)  // Invalidate session on logout
                .deleteCookies("JSESSIONID")  // Delete session cookies
                .logoutSuccessUrl("/login?logout")  // Redirect after logout
                .permitAll();  // Allow everyone to access the logout URL

        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        return customUserDetailsService;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
